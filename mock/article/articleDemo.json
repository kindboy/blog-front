{
    "code": 0,
    "message": "文章获取成功",
    "data": {
        "_id": "5c3b20fe57666419fe3d408c",
        "id": 64,
        "title": "Vue Property Decorator",
        "keyword": "nodejs",
        "descript": "\nNode.js 就不相同了，它使用了「非阻塞」与「事件驱动」模型，你可以把它想象成一个 Event Loop 循环，这个循环会一直跑。一个新的请求来了，Event Loop 接收这个请求，然后交给其他线程，比如查询数据库，然后响应一个 callback，接着接收其他请求，而不是等待数据库结果的返回。",
        "content": "This library fully depends on [vue-class-component](https://github.com/vuejs/vue-class-component), so please read its README before using this library.\n\n## License\n\nMIT License\n\n## Install\n\n```bash\nnpm i -S vue-property-decorator\n```\n\n## Usage\n\nThere are 7 decorators and 1 function (Mixin):\n\n* [`@Emit`](#Emit)\n* [`@Inject`](#Provide)\n* [`@Model`](#Model)\n* [`@Prop`](#Prop)\n* [`@Provide`](#Provide)\n* [`@Watch`](#Watch)\n* `@Component` (**provided by** [vue-class-component](https://github.com/vuejs/vue-class-component))\n* `Mixins` (the helper function named `mixins` **provided by** [vue-class-component](https://github.com/vuejs/vue-class-component))\n\n### <a id=\"Prop\"></a> `@Prop(options: (PropOptions | Constructor[] | Constructor) = {})` decorator\n\n```ts\nimport { Vue, Component, Prop } from 'vue-property-decorator'\n\n@Component\nexport default class YourComponent extends Vue {\n  @Prop(Number) readonly propA!: number\n  @Prop({ default: 'default value' }) readonly propB!: string\n  @Prop([String, Boolean]) readonly propC!: string | boolean\n}\n```\n\nis equivalent to\n\n```js\nexport default {\n  props: {\n    propA: {\n      type: Number\n    },\n    propB: {\n      default: 'default value'\n    },\n    propC: {\n      type: [String, Boolean]\n    },\n  }\n}\n```\n\n**Note that:**\n\n* [reflect-metadata](https://github.com/rbuckton/reflect-metadata) isn't used in this library and setting `emitDecoratorMetadata` to `true` means nothing.\n* Each prop's default value need to be defined as same as the example code shown in above.\n\n### <a id=\"Model\"></a> `@Model(event?: string, options: (PropOptions | Constructor[] | Constructor) = {})` decorator\n\n```ts\nimport { Vue, Component, Model } from 'vue-property-decorator'\n\n@Component\nexport default class YourComponent extends Vue {\n  @Model('change', { type: Boolean }) readonly checked!: boolean\n}\n```\n\nis equivalent to\n\n```js\nexport default {\n  model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    checked: {\n      type: Boolean\n    },\n  },\n}\n```\n\n### <a id=\"Watch\"></a> `@Watch(path: string, options: WatchOptions = {})` decorator\n\n```ts\nimport { Vue, Component, Watch } from 'vue-property-decorator'\n\n@Component\nexport default class YourComponent extends Vue {\n  @Watch('child')\n  onChildChanged(val: string, oldVal: string) { }\n\n  @Watch('person', { immediate: true, deep: true })\n  onPersonChanged1(val: Person, oldVal: Person) { }\n\n  @Watch('person')\n  onPersonChanged2(val: Person, oldVal: Person) { }\n}\n```\n\nis equivalent to\n\n```js\nexport default {\n  watch: {\n    'child': [\n      {\n        handler: 'onChildChanged',\n        immediate: false,\n        deep: false\n      }\n    ],\n    'person': [\n      {\n        handler: 'onPersonChanged1',\n        immediate: true,\n        deep: true\n      },\n      {\n        handler: 'onPersonChanged2',\n        immediate: false,\n        deep: false\n      }\n    ]\n  },\n  methods: {\n    onChildChanged(val, oldVal) { },\n    onPersonChanged1(val, oldVal) { }\n    onPersonChanged2(val, oldVal) { }\n  }\n}\n```\n\n### <a id=\"Emit\"></a> `@Emit(event?: string)` decorator\n\nThe functions decorated by `@Emit` `$emit` their return value followed by their original arguments. If the return value is a promise, it is resolved before being emitted.\n\nIf the name of the event is not supplied via the `event` argument, the function name is used instead. In that case, the camelCase name will be converted to kebab-case.\n\n```ts\nimport { Vue, Component, Emit } from 'vue-property-decorator'\n\n@Component\nexport default class YourComponent extends Vue {\n  count = 0\n\n  @Emit()\n  addToCount(n: number) {\n    this.count += n\n  }\n\n  @Emit('reset')\n  resetCount() {\n    this.count = 0\n  }\n\n  @Emit()\n  returnValue() {\n    return 10\n  }\n\n  @Emit()\n  promise() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(20)\n      }, 0)\n    })\n  }\n}\n```\n\nis equivalent to\n\n```js\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    addToCount(n) {\n      this.count += n\n      this.$emit('add-to-count', n)\n    },\n    resetCount() {\n      this.count = 0\n      this.$emit('reset')\n    },\n    returnValue() {\n      this.$emit('return-value', 10)\n    },\n    promise() {\n      const promise = new Promise(resolve => {\n        setTimeout(() => {\n          resolve(20)\n        }, 0)\n      })\n\n      promise.then(value => {\n        this.$emit('promise', value)\n      })\n    }\n  }\n}\n```\n\n### <a id=\"Provide\"></a> `@Provide(key?: string | symbol)` / `@Inject(options?: { from?: InjectKey, default?: any } | InjectKey)` decorator\n\n```ts\nimport { Component, Inject, Provide, Vue } from 'vue-property-decorator'\n\nconst symbol = Symbol('baz')\n\n@Component\nexport class MyComponent extends Vue {\n  @Inject() readonly foo!: string\n  @Inject('bar') readonly bar!: string\n  @Inject({ from: 'optional', default: 'default' }) readonly optional!: string\n  @Inject(symbol) readonly baz!: string\n\n\n  @Provide() foo = 'foo'\n  @Provide('bar') baz = 'bar'\n}\n```\n\nis equivalent to\n\n```js\nconst symbol = Symbol('baz')\n\nexport const MyComponent = Vue.extend({\n\n  inject: {\n    foo: 'foo',\n    bar: 'bar',\n    'optional': { from: 'optional', default: 'default' },\n    [symbol]: symbol\n  },\n  data () {\n    return {\n      foo: 'foo',\n      baz: 'bar'\n    }\n  },\n  provide () {\n    return {\n      foo: this.foo,\n      bar: this.baz\n    }\n  }\n})\n```\n\n## See also\n\n[vuex-class](https://github.com/ktsn/vuex-class/)",
        "type": 1,
        "thumb": "https://static.jkchao.cn/nodejs-new-pantone-black.png",
        "__v": 0,
        "meta": {
            "comments": 9,
            "likes": 23,
            "views": 521
        },
        "updateAt": "2019-02-17T06:41:18.313Z",
        "createAt": "2019-01-13T11:29:02.509Z",
        "publish": 1,
        "state": 1,
        "tags": [
            {
                "_id": "59d6df5fc72f12628eea9425",
                "id": 6,
                "name": "Node.js",
                "descript": "运行与服务器端的 JavaScript",
                "__v": 0,
                "update_at": "2019-01-05T10:32:14.707Z",
                "sort": 13,
                "create_at": "2017-10-06T01:41:51.905Z"
            }
        ]
    }
}